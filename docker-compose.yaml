networks:
  db:
    driver: bridge
  homepage:
    driver: bridge
  monitoring:
    driver: bridge
  traefik:
    driver: bridge
services:
  docker-socket-proxy:
    container_name: proxy
    environment:
      CONTAINERS: 1
      POST: 0
      SERVICES: 1
      TASKS: 1
    image: ghcr.io/tecnativa/docker-socket-proxy
    ports:
      - 0.0.0.0:2375:2375
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  grafana:
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:-admin}"
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER:-admin}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    image: grafana/grafana
    labels:
      homepage.description: Metrics Visualizer
      homepage.group: Core
      homepage.href: https://grafana.${DOMAIN:-home.arpa}/d/rYdddlPWk/node-exporter-full
      homepage.icon: grafana
      homepage.name: Grafana
      homepage.widget.fields: '["dashboards","datasources","totalalerts","alertstriggered"]'
      homepage.widget.password: "${GRAFANA_ADMIN_PASSWORD:-admin}"
      homepage.widget.type: grafana
      homepage.widget.url: http://grafana:3000
      homepage.widget.username: "${GRAFANA_ADMIN_USERNAME:-admin}"
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.${DOMAIN:-home.arpa}`)
    networks:
      - homepage
      - monitoring
      - traefik
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ${VOLUME_PATH:-./docker}/grafana/dashboards:/var/lib/grafana/dashboards
      - ${VOLUME_PATH:-./docker}/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  homebox:
    container_name: homebox
    environment:
      HBOX_LOG_LEVEL: info
      HBOX_WEB_MAX_UPLOAD_SIZE: 10
    image: ghcr.io/sysadminsmedia/homebox
    labels:
      homepage.description: Home inventory management
      homepage.group: Home
      homepage.href: https://homebox.${DOMAIN:-home.arpa}
      homepage.icon: homebox
      homepage.name: Homebox
      traefik.enable: true
      traefik.http.routers.homebox.rule: Host(`homebox.${DOMAIN:-home.arpa}`)
    networks:
      - homepage
      - traefik
    ports:
      - 7745:7745
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/homebox:/data
  homepage:
    container_name: homepage
    environment:
      HOMEPAGE_ALLOWED_HOSTS: "homepage.${DOMAIN:-home.arpa}"
    image: ghcr.io/gethomepage/homepage
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=Host(`homepage.${DOMAIN:-home.arpa}`)
      - traefik.http.services.homepage.loadbalancer.server.port=3000
    networks:
      - homepage
      - traefik
    ports:
      - "3001:3000"
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
  immich:
    container_name: immich
    depends_on:
      - redis
      - postgres
    environment:
      - DB_HOSTNAME=postgres
      - DB_USERNAME=${IMMICH_DB_USER}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_NAME}
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DBINDEX=0
      - UPLOAD_LOCATION=/usr/src/app/upload
      - IMMICH_VERSION=${IMMICH_VERSION:-release}
      - NODE_ENV=production
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    labels:
      homepage.description: Photo management and backup
      homepage.group: Media
      homepage.href: https://photos.${DOMAIN:-home.arpa}
      homepage.icon: immich
      homepage.name: Immich
      homepage.widget.key: ${IMMICH_API_KEY:-}
      homepage.widget.type: immich
      homepage.widget.url: http://immich:2283
      homepage.widget.version: 2
      traefik.enable: true
      traefik.http.routers.immich.rule: Host(`photos.${DOMAIN:-home.arpa}`)
    networks:
      - db
      - homepage
      - traefik
    ports:
      - 2283:2283
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
  immich-machine-learning:
    container_name: immich-machine-learning
    environment:
      - DB_HOSTNAME=postgres
      - DB_USERNAME=${IMMICH_DB_USER}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_NAME}
      - IMMICH_VERSION=${IMMICH_VERSION:-release}
      - NODE_ENV=production
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    networks:
      - db
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/immich/cache:/cache
  loki:
    container_name: loki
    image: grafana/loki
    networks:
      - monitoring
    ports:
      - 3103:3100
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/loki:/loki
  nextcloud:
    container_name: nextcloud
    depends_on:
      - postgres
    environment:
      NEXTCLOUD_ADMIN_PASSWORD: "${NEXTCLOUD_ADMIN_PASSWORD:-admin}"
      NEXTCLOUD_ADMIN_USER: "${NEXTCLOUD_ADMIN_USER:-admin}"
      NEXTCLOUD_TRUSTED_DOMAINS: "nextcloud.${DOMAIN:-home.arpa}"
      OVERWRITEPROTOCOL: https
      POSTGRES_DB: nextcloud
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: "${NEXTCLOUD_DB_PASSWORD:-nextcloud}"
      POSTGRES_USER: nextcloud
    hostname: nextcloud
    image: nextcloud
    labels:
      homepage.description: Cloud storage and collaboration
      homepage.group: Storage
      homepage.href: "https://nextcloud.${DOMAIN:-home.arpa}"
      homepage.icon: nextcloud
      homepage.name: Nextcloud
      homepage.widget.password: "${NEXTCLOUD_ADMIN_PASSWORD:-admin}"
      homepage.widget.type: nextcloud
      homepage.widget.url: "https://nextcloud.${DOMAIN:-home.arpa}"
      homepage.widget.username: "${NEXTCLOUD_ADMIN_USER:-admin}"
      traefik.enable: true
      traefik.http.middlewares.nextcloud-dav.replacepathregex.regex: "^/.well-known/ca(l|rd)dav"
      traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement: "/remote.php/dav/"
      traefik.http.routers.nextcloud.entrypoints: websecure
      traefik.http.routers.nextcloud.middlewares: nextcloud-dav
      traefik.http.routers.nextcloud.rule: Host(`nextcloud.${DOMAIN:-home.arpa}`)
      traefik.http.routers.nextcloud.tls.certresolver: letsencrypt
      traefik.http.services.nextcloud.loadbalancer.server.port: 80
    networks:
      - db
      - homepage
      - traefik
    ports:
      - "8084:80"
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/nextcloud:/var/www/html
      - ${DATA_PATH:-/mnt/data}/nextcloud:/var/www/html/data
  pgadmin:
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "True"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-${POSTGRES_ROOT_PASSWORD}}
    image: dpage/pgadmin4
    labels:
      homepage.description: PostgreSQL Management Tool
      homepage.group: Data
      homepage.href: https://pgadmin.${DOMAIN:-home.arpa}
      homepage.icon: postgres
      homepage.name: Postgres
      traefik.enable: true
      traefik.http.routers.pgadmin.rule: Host(`pgadmin.${DOMAIN:-home.arpa}`)
    networks:
      - db
      - traefik
    ports:
      - 5050:80
    restart: unless-stopped
    user: "5050:5050"
    volumes:
      - ${VOLUME_PATH:-./docker}/pgadmin/pgpass:/tmp/pgpass:ro
      - ${VOLUME_PATH:-./docker}/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ${VOLUME_PATH:-./docker}/pgadmin/data:/var/lib/pgadmin
  portainer:
    command: -H unix:///var/run/docker.sock --admin-password "${PORTAINER_ADMIN_PASSWORD_HASH:-}"
    container_name: portainer
    image: portainer/portainer-ce
    labels:
      homepage.description: Container Management
      homepage.group: Watchtower
      homepage.href: https://portainer.${DOMAIN:-home.arpa}
      homepage.icon: portainer
      homepage.name: Portainer
      homepage.widget.env: 1
      homepage.widget.fields: '["running", "stopped", "total"]'
      homepage.widget.key: "${PORTAINER_API_KEY:-}"
      homepage.widget.type: portainer
      homepage.widget.url: http://portainer:9000
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`portainer.${DOMAIN:-home.arpa}`)
    networks:
      - homepage
      - traefik
    ports:
      - 9000:9000
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/portainer:/config
      - /var/run/docker.sock:/var/run/docker.sock
  postgres:
    container_name: postgres
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--encoding: UTF8"
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_USER: postgres
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 30s
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 10s
    image: pgvector/pgvector:pg16
    networks:
      - db
    ports:
      - 5432:5432
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${VOLUME_PATH:-./docker}/postgres/data:/var/lib/postgresql/data
  prometheus:
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=3650d"
      - "--web.enable-lifecycle"
    container_name: prometheus
    environment:
      PROMETHEUS_RETENTION_TIME: 3650d
    image: prom/prometheus
    labels:
      homepage.description: Metrics collection
      homepage.group: Monitoring
      homepage.href: https://prometheus.${DOMAIN:-home.arpa}
      homepage.icon: prometheus
      homepage.name: Prometheus
      homepage.widget.type: prometheus
      homepage.widget.url: http://prometheus:9090
      traefik.enable: true
      traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN:-home.arpa}`)
    networks:
      - homepage
      - monitoring
      - traefik
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${VOLUME_PATH:-./docker}/prometheus/data:/prometheus
  promtail:
    command: -config.file=/etc/promtail/config.yml
    container_name: promtail
    environment:
      PROMTAIL_CONFIG_FILE: /etc/promtail/config.yml
    image: grafana/promtail
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/promtail/data:/var/lib/promtail/positions
      - ${VOLUME_PATH:-./docker}/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
  redis:
    command: >
      redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfilename "appendonly.aof" --appendfsync everysec --save 60 1 --save 300 10 --save 900 100
    container_name: redis
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      timeout: 5s
    image: redis:${REDIS_VERSION:-7-alpine}
    networks:
      - db
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/redis:/data
  scrutiny:
    cap_add:
      - SYS_RAWIO
    container_name: scrutiny
    devices:
      - /dev/sda:ro
      - /dev/sdb:ro
      - /dev/sdc:ro
      - /dev/sdd:ro
      - /dev/sde:ro
      - /dev/sdf:ro
      - /dev/sdg:ro
      - /dev/sdh:ro
      - /dev/sdi:ro
      - /dev/sdj:ro
      - /dev/sdk:ro
      - /dev/sdl:ro
    environment:
      SCRUTINY_WEB_LISTEN_HOST: 0.0.0.0
      SCRUTINY_WEB_LISTEN_PORT: 8080
    image: ghcr.io/analogj/scrutiny:master-omnibus
    labels:
      homepage.description: Hard drive health monitoring
      homepage.group: System
      homepage.href: https://scrutiny.${DOMAIN:-home.arpa}
      homepage.icon: scrutiny
      homepage.name: Scrutiny
      homepage.widget.fields: '["passed", "failed", "unknown"]'
      homepage.widget.type: scrutiny
      homepage.widget.url: http://scrutiny:8080
      traefik.enable: true
      traefik.http.routers.scrutiny.rule: Host(`scrutiny.${DOMAIN:-home.arpa}`)
    ports:
      - 8083:8080
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/scrutiny:/opt/scrutiny/config
      - /run/udev:/run/udev:ro
  syncthing:
    container_name: syncthing
    image: syncthing/syncthing
    labels:
      homepage.description: "File synchronization"
      homepage.group: "Storage"
      homepage.href: "https://syncthing.${DOMAIN:-home.arpa}"
      homepage.icon: "syncthing"
      homepage.name: "Syncthing"
      traefik.enable: "true"
      traefik.http.routers.syncthing.rule: "Host(`syncthing.${DOMAIN:-home.arpa}`)"
      traefik.http.services.syncthing.loadbalancer.server.port: 8384
    networks:
      - traefik
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/syncthing:/var/syncthing
      - ${DATA_PATH:-/mnt/data}/sync:/var/syncthing/Sync
  traefik:
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN:-home.arpa}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN:-home.arpa},*.${DOMAIN:-home.arpa}
      - --log.level=DEBUG
      - --providers.docker.exposedbydefault=true
      - --providers.docker=true
      - --serverstransport.insecureskipverify=true
    container_name: traefik
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN:-}"
      CLOUDFLARE_EMAIL: "${CLOUDFLARE_EMAIL:-}"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: "${TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL:-}"
    extra_hosts:
      - host.docker.internal:172.17.0.1
    image: traefik
    labels:
      homepage.description: Reverse proxy for exposing apps via HTTPS
      homepage.group: Watchtower
      homepage.href: https://traefik.${DOMAIN:-home.arpa}
      homepage.icon: traefik
      homepage.name: Traefik
      homepage.widget.type: traefik
      homepage.widget.url: http://traefik:8080
      traefik.enable: true
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.rule: Host(`traefik.${DOMAIN:-home.arpa}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.tls: true
    networks:
      - homepage
      - traefik
    ports:
      - 8080:80
      - 8081:8080
      - 8443:443
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH:-./docker}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
